#!/usr/bin/env utrwrapper.py
## An (utrwrapper.py) extended macro starts with a configuration header embedded in comment lines (preceded by a single '#')
## For real comment lines in the header use multiple '#'s
## Run utrwrapper.py -h for a list of all available configuration options and their effects


#[generalConfig]
#outputDir=output/GDR_Activation_Efficiency_Attenuation_Ce_No3
#ensureTerminalMultiplexer=True
##threads=200 # Number of threads to run utr and make with (Default: System's CPU count)


#[environmentVariables]
#filenamePrefix=GDR_Activation_Efficiency_Attenuation_Ce_No3_E=
#filenameSuffix=keV_n=100000000
#beamOnStatistics=100000000
#filenameTemplate={filenamePrefix}{loopVar}{filenameSuffix}
#setterCmd=/gps/ene/mono {loopVar} keV


#[utrBuildOptions]
#CMAKE_BUILD_TYPE=Release
#CAMPAIGN=Campaign_2021
#DETECTOR_CONSTRUCTION=154Sm-GDR-Activation
#TARGET=Ce_No3

#EVENT_EDEP=ON
#EVENT_VOLUME=ON
#EVENT_EVENTWISE=OFF
#PRINT_PROGRESS=20000000

#GENERATOR_ANGDIST=OFF
#GENERATOR_ANGCORR=OFF


#[getHistogramArgs]
#maxenergy=3 # Maximum energy in histograms in MeV (rounded up to match BINNING)
#binning=1 # Size of bins in the histograms in keV
#maxid=0 # Highest detection volume ID. getHistogram-Eventwise only processes energy depositions in detectors with integer volume ID numbers from 0 to MAXID (MAXID is included).


#[histogramToTxtArgs]
#begin=0 # Index of first histogram to extract from getHistogram's output
#end=0 # Index of last histogram to extract from getHistogram's output, -1 to extract to the last one
##skipempty= # Include to skip empty histograms
##countsonly= # Include to only write bin contents (without energies) 


## The required magic string signals the end of the configuration header
#START_OF_MACRO

# Never simulate more than 2^32= 4294967296 particles using /run/beamOn, since this causes an overflow in the random number seed, giving you in principle the same results over and over again.
# In such cases execute the same simulation multiple times instead.
/control/getEnv beamOnStatistics

# Get the filenamePrefix and filenameSuffix variables defined in the configuration header as GEANT4 aliases
/control/getEnv filenamePrefix
/control/getEnv filenameSuffix

# Disable appendage of additional IDs to filenames (as unique filenames containing the simulated energy will be used for each beamOn)
/utr/setUseFilenameID False
# Set the number of required decimal places for padding of loopVar. Supply -1 to disable padding or supply 0 to just add any missing decimal dots.
/control/alias appendZerosToVarPadding -1


# Do the usual initialization steps for the simulation
/run/initialize

/gps/particle gamma
/gps/pos/type Volume
/gps/pos/shape Cylinder
/gps/pos/inner_radius 0. mm
/gps/pos/radius 4.5 mm
/gps/pos/halfz 1.5 mm
/gps/pos/confine activationTargetIrradiatedPart
/gps/pos/centre 0. 0. 0. mm
/gps/ang/type iso
/gps/ene/type Mono


# Run the generic macro in a loop
# loop Syntax: /control/loop MacroFile Variable Start End Increment
# for each Syntax: /control/foreach MacroFile Variable ValueList
# To use the variable in the macro to be looped refer to it wrapped in {} as {Variable} in the macro
# Remember that due to the numerical inaccuracies when adding float numbers, a loop might generate a run more or less than expected!
/control/foreach macros/examples/genericLoopable.mac loopVar 33 38 38 39 41 42 47 48 60 65 67 70 75 76 78 83 88 89 97 103 122 145 166 266 279 333 356 398 426 605 607 662 796 835 898 1116 1173 1332 1836 50 100 150 200 250 300 350 400 450 500 550 600 650 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2200 2400 2600 2800 3000
